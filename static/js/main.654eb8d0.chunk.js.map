{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","n","setN","result","setResult","event","a","preventDefault","form","target","parseInt","inputNumber","value","data","options","method","headers","body","JSON","stringify","fetch","response","json","success","factorial","className","onSubmit","handleSubmit","name","type","min","autoComplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAuDeA,EAnDW,WAAO,IAAD,EACZC,mBAAwB,MADZ,mBACvBC,EADuB,KACpBC,EADoB,OAEFF,mBAAwB,MAFtB,mBAEvBG,EAFuB,KAEfC,EAFe,iDAQ9B,WAA4BC,GAA5B,yBAAAC,EAAA,6DACED,EAAME,iBACAC,EAAOH,EAAMI,OAEbR,EAAIS,SAASF,EAAKG,YAAYC,OAE9BC,EAAO,CAAEZ,KACTa,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IAZzB,SAoByBO,MAAM,QAASN,GApBxC,cAoBQO,EApBR,iBAqBwBA,EAASC,OArBjC,SAqBQnB,EArBR,QAsBaoB,UACTnB,EAAUD,EAAOqB,WACjBtB,EAAKD,IAxBT,6CAR8B,sBAoC9B,OACE,sBAAKwB,UAAU,MAAf,UACE,uBAAMC,SAAU,SAACrB,GAAD,OAtCU,2CAsCCsB,CAAatB,IAAxC,UACE,uBAAOuB,KAAK,cAAcC,KAAK,SAASC,IAAK,EAAGC,aAAa,QAC7D,wBAAQF,KAAK,SAAb,oCAED1B,GAAgB,OAANF,GACT,sBAAKwB,UAAU,SAAf,UACGxB,EADH,OACUE,SClCH6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.654eb8d0.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './App.css';\n\nconst App: React.FC<{}> = () => {\n  const [n, setN] = useState<number | null>(null);\n  const [result, setResult] = useState<string | null>(null);\n\n  interface factorialForm extends HTMLFormElement {\n    inputNumber: HTMLInputElement;\n  }\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    const form = event.target as factorialForm;\n\n    const n = parseInt(form.inputNumber.value);\n\n    const data = { n };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    };\n\n    interface ResponseType {\n      factorial: string;\n      success: boolean;\n    }\n\n    const response = await fetch('/calc', options);\n    const result = (await response.json()) as ResponseType;\n    if (result.success) {\n      setResult(result.factorial);\n      setN(n);\n    }\n  }\n\n  return (\n    <div className='App'>\n      <form onSubmit={(event) => handleSubmit(event)}>\n        <input name='inputNumber' type='number' min={0} autoComplete='off' />\n        <button type='submit'>Calculate Factorial</button>\n      </form>\n      {result && n !== null && (\n        <div className='result'>\n          {n}! = {result}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}